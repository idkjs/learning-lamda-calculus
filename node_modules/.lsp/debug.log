Hello - from /Users/mandalarian/.vscode/extensions/jaredly.reason-vscode-1.7.9/bin.native
Previous log location: /var/folders/rt/7lc5vcw16459dszl8djk35fh0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":true,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/src/Demo.re","languageId":"reason","version":1,"text":"Js.log(\"Hello, BuckleScript and Reason!\");\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/src/Demo.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
bs-platform could not be found
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/src/Demo.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0209808349609ms
bs-platform could not be found
Sending response {"id": 2, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: bs-platform could not be found", "command": ""}}]}
bs-platform could not be found
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/src/Demo.re"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re","languageId":"reason","version":1,"text":"Js.log(\"Hello, BuckleScript and Reason!\");\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0410079956055ms
bs-platform could not be found
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
bs-platform could not be found
Sending response {"id": 4, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: bs-platform could not be found", "command": ""}}]}
bs-platform could not be found
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re"}}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json","type":3}]}}
Got a watched file change
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/_build/default/.merlin","type":1},{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/.merlin","type":1}]}}
Got a watched file change
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re","languageId":"reason","version":1,"text":"let rec eval = (ast) =>\n  switch (Lambda.eval1(ast)) {\n  | Some(ast) => eval(ast)\n  | None => ast\n  };\n\nlet rec eval_and_print = (ast) => {\n  Lambda.print_ast(ast) |> print_newline;\n  switch (Lambda.eval1(ast)) {\n  | Some(ast) => eval_and_print(ast)\n  | None => ast\n  }\n};\n\nlet finish = Lambda.finish;\n\n\nlet main = () => {\n  let nats = {|\n  type id_t = unit -> unit in\n  type nat = id_t -> unit -> unit in\n  let n = (\n    let succ =\n      /n:nat./s:id_t./z:unit.s (n s z)\n    in\n    let zero =\n      /s:id_t./z:unit.z\n    in\n    succ (succ (succ zero))\n  ) in n @ ()\n  |};\n\n  let print_tm = true;\n  let print_eval = true;\n\n  let term =\n    switch (Parse.parse(nats)) {\n    | Result.Ok(term) => term\n    | Result.Err(e) =>\n      print_string(\"error: \");\n      Parse.print_parser_error(e) |> print_newline;\n      exit(1)\n    };\n\n  if (print_tm) {\n    Lambda.print_term(term) |> print_newline\n  };\n\n  switch (finish(term)) {\n  | Result.Ok(ast) =>\n    if (print_eval) {\n      eval_and_print(ast) |> ignore\n    } else {\n      eval(ast) |> ignore\n    }\n  | Result.Err(e) =>\n    print_string(\"error: \");\n    Lambda.print_type_error(e) |> print_newline;\n    exit(2)\n  };\n};\n\nmain();\n"}}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Demo - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
Error: Program refmt not found in the tree or in PATH
 (context: default)
Hint: try: opam install reason
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Demo - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
Error: Program refmt not found in the tree or in PATH
 (context: default)
Hint: try: opam install reason
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0300407409668ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Demo - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
Error: Program refmt not found in the tree or in PATH
 (context: default)
Hint: try: opam install reason
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Demo - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
Error: Program refmt not found in the tree or in PATH
 (context: default)
Hint: try: opam install reason
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 6, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unsupported OCaml version: 4.10.0", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re"}}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":6}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re","languageId":"reason","version":1,"text":"Js.log(\"Hello, BuckleScript and Reason!\");\n"}}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Demo - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "Demo.re", line 1, characters 0-6:
1 | Js.log("Hello, BuckleScript and Reason!");
    ^^^^^^
Error: Unbound module Js
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Demo - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "Demo.re", line 1, characters 0-6:
1 | Js.log("Hello, BuckleScript and Reason!");
    ^^^^^^
Error: Unbound module Js
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Demo - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "Demo.re", line 1, characters 0-6:
1 | Js.log("Hello, BuckleScript and Reason!");
    ^^^^^^
Error: Unbound module Js
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 8, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unsupported OCaml version: 4.10.0", "command": ""}}]}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/Demo.re"}}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":8}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":7}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re","languageId":"reason","version":1,"text":"open Lambda;\n\nopen Result.Monad;\n\ntype token =\n  | Tok_lambda\n  | Tok_dot\n\n  | Tok_colon\n  | Tok_unit\n  | Tok_arrow\n\n  | Tok_open_paren\n  | Tok_close_paren\n  | Tok_marker\n\n  | Tok_let\n  | Tok_type\n  | Tok_equals\n  | Tok_in\n\n  | Tok_underscore\n  | Tok_var(string);\n\nlet string_of_token = (tok) =>\n  switch tok {\n  | Tok_lambda => \"/\"\n  | Tok_dot => \".\"\n  | Tok_colon => \":\"\n  | Tok_unit => \"unit\"\n  | Tok_arrow => \"->\"\n  | Tok_open_paren => \"(\"\n  | Tok_close_paren => \")\"\n  | Tok_marker => \"@\"\n  | Tok_let => \"let\"\n  | Tok_type => \"type\"\n  | Tok_equals => \"=\"\n  | Tok_in => \"in\"\n  | Tok_underscore => \"_\"\n  | Tok_var(name) => name\n  };\n\ntype lexer = {\n  buffer: string,\n  mutable idx: int,\n  mutable peekahead: option(token)\n};\n\ntype lexer_error =\n  | Lexer_error_end_of_file\n  | Lexer_error_unrecognized_character(char);\n\nlet is_whitespace = (ch) => ch == ' ' || ch == '\\t' || ch == '\\n' || ch == '\\r';\n\nlet is_alpha = (ch) => ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z';\n\nlet is_ident_start = (ch) => is_alpha(ch) || ch == '_';\n\nlet is_ident_continue = (ch) => is_ident_start(ch) || ch == '\\'';\n\nlet make_lexer = (buff) => {buffer: buff, idx: 0, peekahead: None};\n\nlet next_token: lexer => Result.t(token, lexer_error) =\n  (lex) => {\n    let peek_ch = () =>\n      if (String.length(lex.buffer) <= lex.idx) {\n        None\n      } else {\n        Some(lex.buffer.[lex.idx])\n      };\n    let next_ch = () =>\n      switch (peek_ch()) {\n      | Some(ch) =>\n        lex.idx = lex.idx + 1;\n        Some(ch)\n      | None => None\n      };\n    let eat_ch = () => next_ch() |> ignore;\n    let rec eat_whitespace = () =>\n      switch (peek_ch()) {\n      | Some(ch) when is_whitespace(ch) =>\n        eat_ch();\n        eat_whitespace()\n      | Some(_)\n      | None => ()\n      };\n    let lex_ident = (fst) => {\n      let rec helper = (bytes, idx) =>\n        switch (peek_ch()) {\n        | Some(ch) when is_ident_continue(ch) =>\n          eat_ch();\n          if (idx < Bytes.length(bytes)) {\n            Bytes.set(bytes, idx, ch);\n            helper(bytes, idx + 1)\n          } else {\n            failwith(\n              \"identifiers longer than \"\n              ++ string_of_int(Bytes.length(bytes))\n              ++ \" are not supported\"\n            )\n          }\n        | Some(_)\n        | None => idx\n        };\n      let bytes = Bytes.create(16);\n      Bytes.set(bytes, 0, fst);\n      let length = helper(bytes, 1);\n      let bytes' = Bytes.extend(bytes, 0, length - Bytes.length(bytes));\n      Bytes.unsafe_to_string(bytes')\n    };\n    switch lex.peekahead {\n    | Some(peek) =>\n      lex.peekahead = None;\n      Result.Ok(peek)\n    | None =>\n      eat_whitespace();\n      switch (next_ch()) {\n      | Some('/') => Result.Ok(Tok_lambda)\n      | Some(':') => Result.Ok(Tok_colon)\n      | Some('.') => Result.Ok(Tok_dot)\n      | Some('-') =>\n        switch (next_ch()) {\n        | Some('>') => Result.Ok(Tok_arrow)\n        | _ => Result.Err(Lexer_error_unrecognized_character('-'))\n        }\n      | Some('@') => Result.Ok(Tok_marker)\n      | Some('(') => Result.Ok(Tok_open_paren)\n      | Some(')') => Result.Ok(Tok_close_paren)\n      | Some('=') => Result.Ok(Tok_equals)\n      | Some(ch) when is_ident_start(ch) =>\n        let res = lex_ident(ch);\n        if (res == \"unit\") {\n          Result.Ok(Tok_unit)\n        } else if (res == \"_\") {\n          Result.Ok(Tok_underscore)\n        } else if (res == \"let\") {\n          Result.Ok(Tok_let)\n        } else if (res == \"type\") {\n          Result.Ok(Tok_type)\n        } else if (res == \"in\") {\n          Result.Ok(Tok_in)\n        } else {\n          Result.Ok(Tok_var(res))\n        }\n      | Some(ch) => Result.Err(Lexer_error_unrecognized_character(ch))\n      | None => Result.Err(Lexer_error_end_of_file)\n      }\n    }\n  };\n\nlet peek_token = (lex) => {\n  next_token(lex)\n  >>= (tok) => {\n    lex.peekahead = Some(tok);\n    pure(tok)\n  }\n};\n\nlet eat_token = (lex) => next_token(lex) |> ignore;\n\ntype parser_error =\n  | Parser_error_unrecognized_character(char)\n  | Parser_error_unexpected_token(token)\n  | Parser_error_unexpected_eof;\n\nlet print_parser_error = (err) =>\n  switch err {\n  | Parser_error_unrecognized_character(ch) =>\n    Printf.printf(\"unrecognized character: %c (%d)\", ch, int_of_char(ch))\n  | Parser_error_unexpected_token(tok) =>\n    print_string(\"unexpected token: \" ++ string_of_token(tok))\n  | Parser_error_unexpected_eof => print_string(\"unexpected end of file\")\n  };\n\nlet rec maybe_parse_term = (lex) => {\n  let final_case = (r) =>\n    switch r {\n    | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n    | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n      Result.Err(Parser_error_unrecognized_character(ch))\n    | Result.Err(Lexer_error_end_of_file) =>\n      Result.Err(Parser_error_unexpected_eof)\n    };\n  /* note: returns None for _, Some(name) for anything else */\n  let get_var_or_under = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_var(name)) => Result.Ok(Some(name))\n    | Result.Ok(Tok_underscore) => Result.Ok(None)\n    | r => final_case(r)\n    };\n  let get_var = () =>\n    get_var_or_under() >>=\n    fun\n    | Some(name) => Result.Ok(name)\n    | None => Result.Err(Parser_error_unexpected_token(Tok_underscore));\n  let get_dot = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_dot) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_colon = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_colon) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_close_paren = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_close_paren) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_equals = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_equals) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_in = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_in) => Result.Ok()\n    | r => final_case(r)\n    };\n  let rec get_ty = () => {\n    let lhs =\n      switch (next_token(lex)) {\n      | Result.Ok(Tok_unit) => Result.Ok(Lambda.ty_unit())\n      | Result.Ok(Tok_var(name)) => Result.Ok(Lambda.ty_named(name))\n      | Result.Ok(Tok_open_paren) =>\n        get_ty()\n        >>= (ty) => get_close_paren()\n        >>= () => pure(ty)\n      | r => final_case(r)\n      };\n    lhs >>= (lhs) =>\n      switch (peek_token(lex)) {\n      | Result.Ok(Tok_arrow) =>\n        eat_token(lex);\n        get_ty()\n        >>= (it) => pure(Lambda.ty_lam(lhs, it))\n      | Result.Ok(_)\n      | Result.Err(Lexer_error_end_of_file) => Result.Ok(lhs)\n      | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n        Result.Err(Parser_error_unrecognized_character(ch))\n      }\n  };\n  let rec parse_app_list = (fst) =>\n    switch (peek_token(lex)) {\n    | Result.Err(Lexer_error_end_of_file)\n    | Result.Ok(Tok_close_paren)\n    | Result.Ok(Tok_in) => Result.Ok(fst)\n    | Result.Ok(Tok_lambda) =>\n      parse_term(lex)\n      >>= (it) => pure(Lambda.app(fst, it))\n    | Result.Ok(Tok_open_paren) =>\n      eat_token(lex);\n      let snd =\n        switch (peek_token(lex)) {\n        | Result.Ok(Tok_close_paren) => Result.Ok(Lambda.unit())\n        | Result.Ok(_) => parse_term(lex)\n        | r => final_case(r)\n        };\n      snd >>= ((snd) => get_close_paren() >>= (() => parse_app_list(Lambda.app(fst, snd))))\n    | Result.Ok(Tok_var(snd)) =>\n      eat_token(lex);\n      parse_app_list(Lambda.app(fst, Lambda.var(snd)))\n    | Result.Ok(Tok_marker) =>\n      eat_token(lex);\n      parse_app_list(Lambda.app(fst, Lambda.marker()))\n    | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n    | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n      Result.Err(Parser_error_unrecognized_character(ch))\n    };\n  switch (peek_token(lex)) {\n  | Result.Err(Lexer_error_end_of_file)\n  | Result.Ok(Tok_close_paren) => Result.Ok(None)\n  | Result.Ok(Tok_lambda) =>\n    eat_token(lex);\n    get_var_or_under()\n    >>= (name) => get_colon()\n    >>= () => get_ty()\n    >>= (ty) => get_dot()\n    >>= () => parse_term(lex)\n    >>= (body) => pure(Some(Lambda.abs(ty, name, body)))\n  | Result.Ok(Tok_var(name)) =>\n    eat_token(lex);\n    parse_app_list(Lambda.var(name))\n    >>= (it) => pure(Some(it))\n  | Result.Ok(Tok_marker) =>\n    eat_token(lex);\n    parse_app_list(Lambda.marker())\n    >>= (it) => pure(Some(it))\n  | Result.Ok(Tok_let) =>\n    eat_token(lex);\n    get_var()\n    >>= (name) => get_equals()\n    >>= () => parse_term(lex)\n    >>= (init) => get_in()\n    >>= () => parse_term(lex)\n    >>= (body) => pure(Some(Lambda.let_in(name, init, body)))\n  | Result.Ok(Tok_type) =>\n    eat_token(lex);\n    get_var()\n    >>= (name) => get_equals()\n    >>= () => get_ty()\n    >>= (ty) => get_in()\n    >>= () => parse_term(lex)\n    >>= (body) => pure(Some(Lambda.type_in(name, ty, body)))\n  | Result.Ok(Tok_open_paren) =>\n    eat_token(lex);\n    switch (peek_token(lex)) {\n    | Result.Ok(Tok_close_paren) =>\n      eat_token(lex);\n      parse_app_list(Lambda.unit())\n      >>= (it) => pure(Some(it))\n    | Result.Ok(_) =>\n      parse_term(lex)\n      >>= (ret) => get_close_paren()\n      >>= () => parse_app_list(ret)\n      >>= (it) => pure(Some(it))\n    | r => final_case(r)\n    }\n  | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n  | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n    Result.Err(Parser_error_unrecognized_character(ch))\n  }\n}\nand parse_term = (lex) => {\n  maybe_parse_term(lex)\n  >>=\n    fun\n    | Some(tm) => Result.Ok(tm)\n    | None =>\n      switch (next_token(lex)) {\n      | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n      | Result.Err(Lexer_error_end_of_file) => Result.Err(Parser_error_unexpected_eof)\n      | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n        Result.Err(Parser_error_unrecognized_character(ch))\n      }\n};\n\nlet parse = (buff) => {\n  let rest = (lex) => {\n    let len = String.length(lex.buffer) - lex.idx;\n    String.sub(lex.buffer, lex.idx, len)\n  };\n  let lex = make_lexer(buff);\n  parse_term(lex)\n  >>= (ret) => {\n    switch (next_token(lex)) {\n    | Result.Err(Lexer_error_end_of_file) => ()\n    | _ => failwith(\"parser didn't eat all the input: \" ++ rest(lex))\n    };\n    Result.Ok(ret)\n  }\n};\n"}}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 10, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unsupported OCaml version: 4.10.0", "command": ""}}]}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re"},"position":{"line":16,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re"},"range":{"start":{"line":16,"character":11},"end":{"line":16,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re"},"position":{"line":13,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":13}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei","languageId":"reason","version":1,"text":"type parser_error;\n\nlet print_parser_error: parser_error => unit;\n\nlet parse: string => Result.t(Lambda.term, parser_error);\n"}}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 15, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unsupported OCaml version: 4.10.0", "command": ""}}]}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re","languageId":"reason","version":1,"text":"open Result.Monad;\n\ntype ty =\n  | Ty_unit\n  | Ty_lam(ty, ty)\n  | Ty_named(string);\n\ntype term =\n  | Term_marker\n  | Term_unit\n  | Term_var(string)\n  | Term_abs(ty, option(string), term)\n  | Term_app(term, term)\n  \n  /* this is where the \"derived forms\" begin */\n  | Term_let_in(string, term, term)\n  | Term_type_in(string, ty, term);\n\ntype ast =\n  | Ast_marker\n  | Ast_unit\n  | Ast_var(int)\n  | Ast_abs(ty, option(string), ast)\n  | Ast_app(ast, ast);\n\nlet ty_unit = () => Ty_unit;\nlet ty_lam = (lhs, rhs) => Ty_lam(lhs, rhs);\nlet ty_named = (name) => Ty_named(name);\n\nlet unit = () => Term_unit;\nlet marker = () => Term_marker;\nlet var = (name) => Term_var(name);\nlet abs = (ty, name, body) => Term_abs(ty, name, body);\nlet app = (callee, parm) => Term_app(callee, parm);\nlet let_in = (name, init, body) => Term_let_in(name, init, body);\nlet type_in = (name, ty, body) => Term_type_in(name, ty, body);\n\nlet rec string_of_ty = (ty) => {\n  let is_cmplx = (ty) =>\n    switch ty {\n    | Ty_unit => true\n    | Ty_named(_) => true\n    | Ty_lam(_, _) => false\n    };\n  switch ty {\n  | Ty_unit => \"unit\"\n  | Ty_named(name) => name\n  | Ty_lam(lhs, rhs) =>\n    let lhs' =\n      if (is_cmplx(lhs)) {\n        \"(\" ++ string_of_ty(lhs) ++ \") -> \"\n      } else {\n        string_of_ty(lhs) ++ \" -> \"\n      };\n    lhs' ++ string_of_ty(rhs)\n  }\n};\n\nlet print_ty = (ty) => print_string(string_of_ty(ty));\n\nlet rec print_term = (term) => {\n  let is_cmplx =\n    fun\n    | Term_marker => false\n    | Term_unit => false\n    | Term_var(_) => false\n    | _ => true;\n  let print_cmplx = (tm) =>\n    if (is_cmplx(tm)) {\n      print_char('('); print_term(tm); print_char(')');\n    } else {\n      print_term(tm);\n    };\n  switch term {\n  | Term_marker => print_char('@')\n  | Term_unit => print_string(\"()\")\n  | Term_var(name) => print_string(name)\n  | Term_abs(ty, var, body) =>\n    print_char('/');\n    switch (var) {\n    | Some(var) => print_string(var)\n    | None => print_char('_')\n    };\n    print_char(':');\n    print_ty(ty);\n    print_char('.');\n    print_term(body)\n  | Term_app(callee, parm) =>\n    print_cmplx(callee);\n    print_char(' ');\n    print_cmplx(parm)\n  | Term_let_in(name, init, body) =>\n    print_string(\"let \" ++ name ++ \" = \");\n    print_cmplx(init);\n    print_string(\" in\\n\");\n    print_cmplx(body)\n  | Term_type_in(name, ty, body) =>\n    print_string(\"type \" ++ name ++ \" = \");\n    print_ty(ty);\n    print_string(\" in\\n\");\n    print_cmplx(body)\n  }\n};\n\nlet string_of_ast = (ast) => {\n  let rec bound_var_name = (idx, names) =>\n    switch names {\n    | [name, ...names] =>\n      if (idx == 0) {\n        switch name {\n        | Some(name) => name\n        | None => failwith(\"malformed lambda calculus ast\")\n        }\n      } else {\n        bound_var_name(idx - 1, names)\n      }\n    | [] => failwith(\"malformed lambda calculus ast\")\n    };\n  let is_cmplx = (ast) =>\n    switch ast {\n    | Ast_marker => false\n    | Ast_unit => false\n    | Ast_var(_) => false\n    | _ => true\n    };\n  let rec soa_rec = (ast, names) => {\n    let soa_cmplx = (ast) =>\n      if (is_cmplx(ast)) {\n        \"(\" ++ soa_rec(ast, names) ++ \")\"\n      } else {\n        soa_rec(ast, names)\n      };\n    switch ast {\n    | Ast_marker => \"@\"\n    | Ast_unit => \"()\"\n    | Ast_var(idx) => bound_var_name(idx, names)\n    | Ast_app(callee, parm) => soa_cmplx(callee) ++ \" \" ++ soa_cmplx(parm)\n    | Ast_abs(ty, name, body) =>\n      let name' = switch name {\n      | Some(name) => name\n      | None => \"_\"\n      };\n      \"/\" ++ name' ++ \":\" ++ string_of_ty(ty) ++ \".\" ++ soa_rec(body, [name, ...names])\n    }\n  };\n  soa_rec(ast, [])\n};\n\nlet print_ast = (ast) => print_string(string_of_ast(ast));\n\ntype type_error =\n  | Type_error_variable_not_found(string)\n  | Type_error_type_not_found(string)\n  | Type_error_incorrect_types(ty, ty)\n  | Type_error_calling_non_callable(ty, ast);\n\nlet print_type_error = (err) =>\n  switch err {\n  | Type_error_variable_not_found(var) => print_string(\"variable not found: \" ++ var)\n  | Type_error_type_not_found(ty) => print_string(\"type not found: \" ++ ty)\n  | Type_error_incorrect_types(lhs, rhs) =>\n    print_string(\"type mismatch: \" ++ string_of_ty(lhs) ++ \" != \" ++ string_of_ty(rhs))\n  | Type_error_calling_non_callable(ty, ast) =>\n    print_string(\n      \"attempt to call non-callable: \" ++ string_of_ty(ty) ++ \"\\n  \" ++ string_of_ast(ast)\n    )\n  };\n\nlet rec typeof_rec = (ast, tys) =>\n  switch ast {\n  | Ast_app(callee, _) as ast' =>\n    switch (typeof_rec(callee, tys)) {\n    | Result.Ok(Ty_lam(_, ret)) => Result.Ok(ret)\n    | Result.Ok(Ty_named(_)) => failwith(\"malformed ast\")\n    | Result.Ok(ty) => Result.Err(Type_error_calling_non_callable(ty, ast'))\n    | Result.Err(e) => Result.Err(e)\n    }\n  | Ast_abs(ty, _, body) =>\n    typeof_rec(body, [ty, ...tys])\n    >>= (it) => pure(Ty_lam(ty, it))\n  | Ast_unit => Result.Ok(Ty_unit)\n  | Ast_marker => Result.Ok(Ty_lam(Ty_unit, Ty_unit))\n  | Ast_var(idx) => Result.Ok(List.nth(tys, idx))\n  };\n\nlet typeof = (ast) =>\n  switch (typeof_rec(ast, [])) {\n  | Result.Ok(Ty_named(_)) => failwith(\"malformed ast\")\n  | Result.Ok(ty) => ty\n  | Result.Err(_) => failwith(\"malformed ast\")\n  };\n\nlet finish = (tm) => {\n  let rec get_var = (name, names, idx) =>\n    switch names {\n    | [x, ..._] when x == Some(name) => Result.Ok(Ast_var(idx))\n    | [_, ...xs] => get_var(name, xs, idx + 1)\n    | [] => Result.Err(Type_error_variable_not_found(name))\n    };\n  let rec get_structural_ty = (ty, ty_names) => {\n    let rec get_named_ty = (name, ty_names) =>\n      switch ty_names {\n      | [(name', ty), ..._] when name' == name => Result.Ok(ty)\n      | [_, ...xs] => get_named_ty(name, xs)\n      | [] => Result.Err(Type_error_type_not_found(name))\n      };\n\n    switch ty {\n    | Ty_named(name) => get_named_ty(name, ty_names)\n    | Ty_lam(lhs, rhs) =>\n      get_structural_ty(lhs, ty_names)\n      >>= (lhs) => get_structural_ty(rhs, ty_names)\n      >>= (rhs) => pure(Ty_lam(lhs, rhs))\n    | Ty_unit => pure(Ty_unit)\n    }\n  };\n  let rec finish_rec = (tm, names, tys, ty_names) =>\n    switch tm {\n    | Term_marker => Result.Ok(Ast_marker)\n    | Term_unit => Result.Ok(Ast_unit)\n    | Term_var(name) => get_var(name, names, 0)\n    | Term_app(callee, parm) =>\n      finish_rec(callee, names, tys, ty_names)\n      >>= (callee') => finish_rec(parm, names, tys, ty_names)\n      >>= (parm') => typeof_rec(callee', tys)\n      >>= (it) =>\n        switch it {\n        | Ty_lam(parm_ty, _) =>\n          typeof_rec(parm', tys)\n          >>= (parm_ty') =>\n            if (parm_ty != parm_ty') {\n              Result.Err(Type_error_incorrect_types(parm_ty, parm_ty'))\n            } else {\n              Result.Ok(Ast_app(callee', parm'))\n            }\n        | Ty_named(_) => failwith(\"substitution of named types failed\")\n        | ty =>\n          Result.Err(\n            Type_error_calling_non_callable(ty, Ast_app(callee', parm'))\n          )\n        }\n    | Term_abs(ty, name, body) =>\n      get_structural_ty(ty, ty_names)\n      >>= (ty) => finish_rec(body, [name, ...names], [ty, ...tys], ty_names)\n      >>= (body') => pure(Ast_abs(ty, name, body'))\n    | Term_let_in(name, init, body) =>\n      finish_rec(init, names, tys, ty_names)\n      >>= (init') => {\n        let init_ty = typeof(init');\n        finish_rec(body, [Some(name), ...names], [init_ty, ...tys], ty_names)\n        >>= (body') =>\n          pure(Ast_app(\n            Ast_abs(init_ty, Some(name), body'),\n            init'\n          ))\n      }\n    | Term_type_in(name, ty, body) =>\n      get_structural_ty(ty, ty_names)\n      >>= (ty) => finish_rec(body, names, tys, [(name, ty), ...ty_names])\n    };\n  finish_rec(tm, [], [], [])\n};\n\nlet substitute = (body, parm) => {\n  let rec sub_rec = (body, parm, idx) =>\n    switch body {\n    | Ast_var(idx') when idx == idx' => parm\n    | Ast_app(callee', parm') => Ast_app(sub_rec(callee', parm, idx), sub_rec(parm', parm, idx))\n    | Ast_abs(ty, name, body') => Ast_abs(ty, name, sub_rec(body', parm, idx + 1))\n    | unchanged => unchanged\n    };\n  sub_rec(body, parm, 0)\n};\n\nlet rec eval1 = (ast) => {\n  let rec eval_app = (callee, parm) =>\n    switch callee {\n    | Ast_unit => None\n    | Ast_var(_) => failwith(\"malformed lambda ast\")\n    | Ast_abs(_, _, body) => Some(substitute(body, parm))\n    | Ast_marker =>\n      switch (eval1(parm)) {\n      | Some(parm') => Some(Ast_app(Ast_marker, parm'))\n      | None => None\n      }\n    | Ast_app(callee', parm') =>\n      switch (eval_app(callee', parm')) {\n      | Some(callee) => Some(Ast_app(callee, parm))\n      | None =>\n        switch (eval1(parm)) {\n        | Some(parm) => Some(Ast_app(callee, parm))\n        | None => None\n        }\n      }\n    };\n  switch ast {\n  | Ast_marker => None\n  | Ast_unit => None\n  | Ast_var(_) => failwith(\"malformed ast\")\n  | Ast_abs(_, _, _) => None\n  | Ast_app(callee, parm) => eval_app(callee, parm)\n  }\n};\n"}}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 17, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unsupported OCaml version: 4.10.0", "command": ""}}]}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re"},"position":{"line":15,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":18}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re"},"position":{"line":106,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.0369548797607ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":19}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re","languageId":"reason","version":1,"text":"type t('t, 'e) =\n  | Ok('t)\n  | Err('e);\n\nlet map = (lam, res) =>\n  switch res {\n  | Ok(r) => Ok(lam(r))\n  | Err(_) as err => err\n  };\n\nlet bind = (lam, res) =>\n  switch res {\n  | Ok(r) => lam(r)\n  | Err(_) as err => err\n  };\n\nmodule Monad = {\n  let (>>=) = (x, y) => bind(y, x);\n  let pure = (x) => Ok(x);\n};\n"}}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0159740447998ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 21, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unsupported OCaml version: 4.10.0", "command": ""}}]}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re","languageId":"reason","version":1,"text":"open Lambda;\n\nopen Result.Monad;\n\ntype token =\n  | Tok_lambda\n  | Tok_dot\n\n  | Tok_colon\n  | Tok_unit\n  | Tok_arrow\n\n  | Tok_open_paren\n  | Tok_close_paren\n  | Tok_marker\n\n  | Tok_let\n  | Tok_type\n  | Tok_equals\n  | Tok_in\n\n  | Tok_underscore\n  | Tok_var(string);\n\nlet string_of_token = (tok) =>\n  switch tok {\n  | Tok_lambda => \"/\"\n  | Tok_dot => \".\"\n  | Tok_colon => \":\"\n  | Tok_unit => \"unit\"\n  | Tok_arrow => \"->\"\n  | Tok_open_paren => \"(\"\n  | Tok_close_paren => \")\"\n  | Tok_marker => \"@\"\n  | Tok_let => \"let\"\n  | Tok_type => \"type\"\n  | Tok_equals => \"=\"\n  | Tok_in => \"in\"\n  | Tok_underscore => \"_\"\n  | Tok_var(name) => name\n  };\n\ntype lexer = {\n  buffer: string,\n  mutable idx: int,\n  mutable peekahead: option(token)\n};\n\ntype lexer_error =\n  | Lexer_error_end_of_file\n  | Lexer_error_unrecognized_character(char);\n\nlet is_whitespace = (ch) => ch == ' ' || ch == '\\t' || ch == '\\n' || ch == '\\r';\n\nlet is_alpha = (ch) => ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z';\n\nlet is_ident_start = (ch) => is_alpha(ch) || ch == '_';\n\nlet is_ident_continue = (ch) => is_ident_start(ch) || ch == '\\'';\n\nlet make_lexer = (buff) => {buffer: buff, idx: 0, peekahead: None};\n\nlet next_token: lexer => Result.t(token, lexer_error) =\n  (lex) => {\n    let peek_ch = () =>\n      if (String.length(lex.buffer) <= lex.idx) {\n        None\n      } else {\n        Some(lex.buffer.[lex.idx])\n      };\n    let next_ch = () =>\n      switch (peek_ch()) {\n      | Some(ch) =>\n        lex.idx = lex.idx + 1;\n        Some(ch)\n      | None => None\n      };\n    let eat_ch = () => next_ch() |> ignore;\n    let rec eat_whitespace = () =>\n      switch (peek_ch()) {\n      | Some(ch) when is_whitespace(ch) =>\n        eat_ch();\n        eat_whitespace()\n      | Some(_)\n      | None => ()\n      };\n    let lex_ident = (fst) => {\n      let rec helper = (bytes, idx) =>\n        switch (peek_ch()) {\n        | Some(ch) when is_ident_continue(ch) =>\n          eat_ch();\n          if (idx < Bytes.length(bytes)) {\n            Bytes.set(bytes, idx, ch);\n            helper(bytes, idx + 1)\n          } else {\n            failwith(\n              \"identifiers longer than \"\n              ++ string_of_int(Bytes.length(bytes))\n              ++ \" are not supported\"\n            )\n          }\n        | Some(_)\n        | None => idx\n        };\n      let bytes = Bytes.create(16);\n      Bytes.set(bytes, 0, fst);\n      let length = helper(bytes, 1);\n      let bytes' = Bytes.extend(bytes, 0, length - Bytes.length(bytes));\n      Bytes.unsafe_to_string(bytes')\n    };\n    switch lex.peekahead {\n    | Some(peek) =>\n      lex.peekahead = None;\n      Result.Ok(peek)\n    | None =>\n      eat_whitespace();\n      switch (next_ch()) {\n      | Some('/') => Result.Ok(Tok_lambda)\n      | Some(':') => Result.Ok(Tok_colon)\n      | Some('.') => Result.Ok(Tok_dot)\n      | Some('-') =>\n        switch (next_ch()) {\n        | Some('>') => Result.Ok(Tok_arrow)\n        | _ => Result.Err(Lexer_error_unrecognized_character('-'))\n        }\n      | Some('@') => Result.Ok(Tok_marker)\n      | Some('(') => Result.Ok(Tok_open_paren)\n      | Some(')') => Result.Ok(Tok_close_paren)\n      | Some('=') => Result.Ok(Tok_equals)\n      | Some(ch) when is_ident_start(ch) =>\n        let res = lex_ident(ch);\n        if (res == \"unit\") {\n          Result.Ok(Tok_unit)\n        } else if (res == \"_\") {\n          Result.Ok(Tok_underscore)\n        } else if (res == \"let\") {\n          Result.Ok(Tok_let)\n        } else if (res == \"type\") {\n          Result.Ok(Tok_type)\n        } else if (res == \"in\") {\n          Result.Ok(Tok_in)\n        } else {\n          Result.Ok(Tok_var(res))\n        }\n      | Some(ch) => Result.Err(Lexer_error_unrecognized_character(ch))\n      | None => Result.Err(Lexer_error_end_of_file)\n      }\n    }\n  };\n\nlet peek_token = (lex) => {\n  next_token(lex)\n  >>= (tok) => {\n    lex.peekahead = Some(tok);\n    pure(tok)\n  }\n};\n\nlet eat_token = (lex) => next_token(lex) |> ignore;\n\ntype parser_error =\n  | Parser_error_unrecognized_character(char)\n  | Parser_error_unexpected_token(token)\n  | Parser_error_unexpected_eof;\n\nlet print_parser_error = (err) =>\n  switch err {\n  | Parser_error_unrecognized_character(ch) =>\n    Printf.printf(\"unrecognized character: %c (%d)\", ch, int_of_char(ch))\n  | Parser_error_unexpected_token(tok) =>\n    print_string(\"unexpected token: \" ++ string_of_token(tok))\n  | Parser_error_unexpected_eof => print_string(\"unexpected end of file\")\n  };\n\nlet rec maybe_parse_term = (lex) => {\n  let final_case = (r) =>\n    switch r {\n    | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n    | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n      Result.Err(Parser_error_unrecognized_character(ch))\n    | Result.Err(Lexer_error_end_of_file) =>\n      Result.Err(Parser_error_unexpected_eof)\n    };\n  /* note: returns None for _, Some(name) for anything else */\n  let get_var_or_under = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_var(name)) => Result.Ok(Some(name))\n    | Result.Ok(Tok_underscore) => Result.Ok(None)\n    | r => final_case(r)\n    };\n  let get_var = () =>\n    get_var_or_under() >>=\n    fun\n    | Some(name) => Result.Ok(name)\n    | None => Result.Err(Parser_error_unexpected_token(Tok_underscore));\n  let get_dot = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_dot) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_colon = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_colon) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_close_paren = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_close_paren) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_equals = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_equals) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_in = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_in) => Result.Ok()\n    | r => final_case(r)\n    };\n  let rec get_ty = () => {\n    let lhs =\n      switch (next_token(lex)) {\n      | Result.Ok(Tok_unit) => Result.Ok(Lambda.ty_unit())\n      | Result.Ok(Tok_var(name)) => Result.Ok(Lambda.ty_named(name))\n      | Result.Ok(Tok_open_paren) =>\n        get_ty()\n        >>= (ty) => get_close_paren()\n        >>= () => pure(ty)\n      | r => final_case(r)\n      };\n    lhs >>= (lhs) =>\n      switch (peek_token(lex)) {\n      | Result.Ok(Tok_arrow) =>\n        eat_token(lex);\n        get_ty()\n        >>= (it) => pure(Lambda.ty_lam(lhs, it))\n      | Result.Ok(_)\n      | Result.Err(Lexer_error_end_of_file) => Result.Ok(lhs)\n      | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n        Result.Err(Parser_error_unrecognized_character(ch))\n      }\n  };\n  let rec parse_app_list = (fst) =>\n    switch (peek_token(lex)) {\n    | Result.Err(Lexer_error_end_of_file)\n    | Result.Ok(Tok_close_paren)\n    | Result.Ok(Tok_in) => Result.Ok(fst)\n    | Result.Ok(Tok_lambda) =>\n      parse_term(lex)\n      >>= (it) => pure(Lambda.app(fst, it))\n    | Result.Ok(Tok_open_paren) =>\n      eat_token(lex);\n      let snd =\n        switch (peek_token(lex)) {\n        | Result.Ok(Tok_close_paren) => Result.Ok(Lambda.unit())\n        | Result.Ok(_) => parse_term(lex)\n        | r => final_case(r)\n        };\n      snd >>= ((snd) => get_close_paren() >>= (() => parse_app_list(Lambda.app(fst, snd))))\n    | Result.Ok(Tok_var(snd)) =>\n      eat_token(lex);\n      parse_app_list(Lambda.app(fst, Lambda.var(snd)))\n    | Result.Ok(Tok_marker) =>\n      eat_token(lex);\n      parse_app_list(Lambda.app(fst, Lambda.marker()))\n    | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n    | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n      Result.Err(Parser_error_unrecognized_character(ch))\n    };\n  switch (peek_token(lex)) {\n  | Result.Err(Lexer_error_end_of_file)\n  | Result.Ok(Tok_close_paren) => Result.Ok(None)\n  | Result.Ok(Tok_lambda) =>\n    eat_token(lex);\n    get_var_or_under()\n    >>= (name) => get_colon()\n    >>= () => get_ty()\n    >>= (ty) => get_dot()\n    >>= () => parse_term(lex)\n    >>= (body) => pure(Some(Lambda.abs(ty, name, body)))\n  | Result.Ok(Tok_var(name)) =>\n    eat_token(lex);\n    parse_app_list(Lambda.var(name))\n    >>= (it) => pure(Some(it))\n  | Result.Ok(Tok_marker) =>\n    eat_token(lex);\n    parse_app_list(Lambda.marker())\n    >>= (it) => pure(Some(it))\n  | Result.Ok(Tok_let) =>\n    eat_token(lex);\n    get_var()\n    >>= (name) => get_equals()\n    >>= () => parse_term(lex)\n    >>= (init) => get_in()\n    >>= () => parse_term(lex)\n    >>= (body) => pure(Some(Lambda.let_in(name, init, body)))\n  | Result.Ok(Tok_type) =>\n    eat_token(lex);\n    get_var()\n    >>= (name) => get_equals()\n    >>= () => get_ty()\n    >>= (ty) => get_in()\n    >>= () => parse_term(lex)\n    >>= (body) => pure(Some(Lambda.type_in(name, ty, body)))\n  | Result.Ok(Tok_open_paren) =>\n    eat_token(lex);\n    switch (peek_token(lex)) {\n    | Result.Ok(Tok_close_paren) =>\n      eat_token(lex);\n      parse_app_list(Lambda.unit())\n      >>= (it) => pure(Some(it))\n    | Result.Ok(_) =>\n      parse_term(lex)\n      >>= (ret) => get_close_paren()\n      >>= () => parse_app_list(ret)\n      >>= (it) => pure(Some(it))\n    | r => final_case(r)\n    }\n  | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n  | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n    Result.Err(Parser_error_unrecognized_character(ch))\n  }\n}\nand parse_term = (lex) => {\n  maybe_parse_term(lex)\n  >>=\n    fun\n    | Some(tm) => Result.Ok(tm)\n    | None =>\n      switch (next_token(lex)) {\n      | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n      | Result.Err(Lexer_error_end_of_file) => Result.Err(Parser_error_unexpected_eof)\n      | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n        Result.Err(Parser_error_unrecognized_character(ch))\n      }\n};\n\nlet parse = (buff) => {\n  let rest = (lex) => {\n    let len = String.length(lex.buffer) - lex.idx;\n    String.sub(lex.buffer, lex.idx, len)\n  };\n  let lex = make_lexer(buff);\n  parse_term(lex)\n  >>= (ret) => {\n    switch (next_token(lex)) {\n    | Result.Err(Lexer_error_end_of_file) => ()\n    | _ => failwith(\"parser didn't eat all the input: \" ++ rest(lex))\n    };\n    Result.Ok(ret)\n  }\n};\n"}}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 23, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unsupported OCaml version: 4.10.0", "command": ""}}]}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re"},"range":{"start":{"line":16,"character":11},"end":{"line":16,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
File "parse.re", line 1, characters 0-11:
1 | open Lambda;
    ^^^^^^^^^^^
Error (warning 33): unused open Dune__exe.Lambda.
Affected files: file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":22}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re"},"range":{"start":{"line":0,"character":12},"end":{"line":0,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":24}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":25}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re","version":2},"contentChanges":[{"text":"// open Lambda;\n\nopen Result.Monad;\n\ntype token =\n  | Tok_lambda\n  | Tok_dot\n\n  | Tok_colon\n  | Tok_unit\n  | Tok_arrow\n\n  | Tok_open_paren\n  | Tok_close_paren\n  | Tok_marker\n\n  | Tok_let\n  | Tok_type\n  | Tok_equals\n  | Tok_in\n\n  | Tok_underscore\n  | Tok_var(string);\n\nlet string_of_token = (tok) =>\n  switch tok {\n  | Tok_lambda => \"/\"\n  | Tok_dot => \".\"\n  | Tok_colon => \":\"\n  | Tok_unit => \"unit\"\n  | Tok_arrow => \"->\"\n  | Tok_open_paren => \"(\"\n  | Tok_close_paren => \")\"\n  | Tok_marker => \"@\"\n  | Tok_let => \"let\"\n  | Tok_type => \"type\"\n  | Tok_equals => \"=\"\n  | Tok_in => \"in\"\n  | Tok_underscore => \"_\"\n  | Tok_var(name) => name\n  };\n\ntype lexer = {\n  buffer: string,\n  mutable idx: int,\n  mutable peekahead: option(token)\n};\n\ntype lexer_error =\n  | Lexer_error_end_of_file\n  | Lexer_error_unrecognized_character(char);\n\nlet is_whitespace = (ch) => ch == ' ' || ch == '\\t' || ch == '\\n' || ch == '\\r';\n\nlet is_alpha = (ch) => ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z';\n\nlet is_ident_start = (ch) => is_alpha(ch) || ch == '_';\n\nlet is_ident_continue = (ch) => is_ident_start(ch) || ch == '\\'';\n\nlet make_lexer = (buff) => {buffer: buff, idx: 0, peekahead: None};\n\nlet next_token: lexer => Result.t(token, lexer_error) =\n  (lex) => {\n    let peek_ch = () =>\n      if (String.length(lex.buffer) <= lex.idx) {\n        None\n      } else {\n        Some(lex.buffer.[lex.idx])\n      };\n    let next_ch = () =>\n      switch (peek_ch()) {\n      | Some(ch) =>\n        lex.idx = lex.idx + 1;\n        Some(ch)\n      | None => None\n      };\n    let eat_ch = () => next_ch() |> ignore;\n    let rec eat_whitespace = () =>\n      switch (peek_ch()) {\n      | Some(ch) when is_whitespace(ch) =>\n        eat_ch();\n        eat_whitespace()\n      | Some(_)\n      | None => ()\n      };\n    let lex_ident = (fst) => {\n      let rec helper = (bytes, idx) =>\n        switch (peek_ch()) {\n        | Some(ch) when is_ident_continue(ch) =>\n          eat_ch();\n          if (idx < Bytes.length(bytes)) {\n            Bytes.set(bytes, idx, ch);\n            helper(bytes, idx + 1)\n          } else {\n            failwith(\n              \"identifiers longer than \"\n              ++ string_of_int(Bytes.length(bytes))\n              ++ \" are not supported\"\n            )\n          }\n        | Some(_)\n        | None => idx\n        };\n      let bytes = Bytes.create(16);\n      Bytes.set(bytes, 0, fst);\n      let length = helper(bytes, 1);\n      let bytes' = Bytes.extend(bytes, 0, length - Bytes.length(bytes));\n      Bytes.unsafe_to_string(bytes')\n    };\n    switch lex.peekahead {\n    | Some(peek) =>\n      lex.peekahead = None;\n      Result.Ok(peek)\n    | None =>\n      eat_whitespace();\n      switch (next_ch()) {\n      | Some('/') => Result.Ok(Tok_lambda)\n      | Some(':') => Result.Ok(Tok_colon)\n      | Some('.') => Result.Ok(Tok_dot)\n      | Some('-') =>\n        switch (next_ch()) {\n        | Some('>') => Result.Ok(Tok_arrow)\n        | _ => Result.Err(Lexer_error_unrecognized_character('-'))\n        }\n      | Some('@') => Result.Ok(Tok_marker)\n      | Some('(') => Result.Ok(Tok_open_paren)\n      | Some(')') => Result.Ok(Tok_close_paren)\n      | Some('=') => Result.Ok(Tok_equals)\n      | Some(ch) when is_ident_start(ch) =>\n        let res = lex_ident(ch);\n        if (res == \"unit\") {\n          Result.Ok(Tok_unit)\n        } else if (res == \"_\") {\n          Result.Ok(Tok_underscore)\n        } else if (res == \"let\") {\n          Result.Ok(Tok_let)\n        } else if (res == \"type\") {\n          Result.Ok(Tok_type)\n        } else if (res == \"in\") {\n          Result.Ok(Tok_in)\n        } else {\n          Result.Ok(Tok_var(res))\n        }\n      | Some(ch) => Result.Err(Lexer_error_unrecognized_character(ch))\n      | None => Result.Err(Lexer_error_end_of_file)\n      }\n    }\n  };\n\nlet peek_token = (lex) => {\n  next_token(lex)\n  >>= (tok) => {\n    lex.peekahead = Some(tok);\n    pure(tok)\n  }\n};\n\nlet eat_token = (lex) => next_token(lex) |> ignore;\n\ntype parser_error =\n  | Parser_error_unrecognized_character(char)\n  | Parser_error_unexpected_token(token)\n  | Parser_error_unexpected_eof;\n\nlet print_parser_error = (err) =>\n  switch err {\n  | Parser_error_unrecognized_character(ch) =>\n    Printf.printf(\"unrecognized character: %c (%d)\", ch, int_of_char(ch))\n  | Parser_error_unexpected_token(tok) =>\n    print_string(\"unexpected token: \" ++ string_of_token(tok))\n  | Parser_error_unexpected_eof => print_string(\"unexpected end of file\")\n  };\n\nlet rec maybe_parse_term = (lex) => {\n  let final_case = (r) =>\n    switch r {\n    | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n    | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n      Result.Err(Parser_error_unrecognized_character(ch))\n    | Result.Err(Lexer_error_end_of_file) =>\n      Result.Err(Parser_error_unexpected_eof)\n    };\n  /* note: returns None for _, Some(name) for anything else */\n  let get_var_or_under = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_var(name)) => Result.Ok(Some(name))\n    | Result.Ok(Tok_underscore) => Result.Ok(None)\n    | r => final_case(r)\n    };\n  let get_var = () =>\n    get_var_or_under() >>=\n    fun\n    | Some(name) => Result.Ok(name)\n    | None => Result.Err(Parser_error_unexpected_token(Tok_underscore));\n  let get_dot = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_dot) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_colon = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_colon) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_close_paren = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_close_paren) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_equals = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_equals) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_in = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_in) => Result.Ok()\n    | r => final_case(r)\n    };\n  let rec get_ty = () => {\n    let lhs =\n      switch (next_token(lex)) {\n      | Result.Ok(Tok_unit) => Result.Ok(Lambda.ty_unit())\n      | Result.Ok(Tok_var(name)) => Result.Ok(Lambda.ty_named(name))\n      | Result.Ok(Tok_open_paren) =>\n        get_ty()\n        >>= (ty) => get_close_paren()\n        >>= () => pure(ty)\n      | r => final_case(r)\n      };\n    lhs >>= (lhs) =>\n      switch (peek_token(lex)) {\n      | Result.Ok(Tok_arrow) =>\n        eat_token(lex);\n        get_ty()\n        >>= (it) => pure(Lambda.ty_lam(lhs, it))\n      | Result.Ok(_)\n      | Result.Err(Lexer_error_end_of_file) => Result.Ok(lhs)\n      | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n        Result.Err(Parser_error_unrecognized_character(ch))\n      }\n  };\n  let rec parse_app_list = (fst) =>\n    switch (peek_token(lex)) {\n    | Result.Err(Lexer_error_end_of_file)\n    | Result.Ok(Tok_close_paren)\n    | Result.Ok(Tok_in) => Result.Ok(fst)\n    | Result.Ok(Tok_lambda) =>\n      parse_term(lex)\n      >>= (it) => pure(Lambda.app(fst, it))\n    | Result.Ok(Tok_open_paren) =>\n      eat_token(lex);\n      let snd =\n        switch (peek_token(lex)) {\n        | Result.Ok(Tok_close_paren) => Result.Ok(Lambda.unit())\n        | Result.Ok(_) => parse_term(lex)\n        | r => final_case(r)\n        };\n      snd >>= ((snd) => get_close_paren() >>= (() => parse_app_list(Lambda.app(fst, snd))))\n    | Result.Ok(Tok_var(snd)) =>\n      eat_token(lex);\n      parse_app_list(Lambda.app(fst, Lambda.var(snd)))\n    | Result.Ok(Tok_marker) =>\n      eat_token(lex);\n      parse_app_list(Lambda.app(fst, Lambda.marker()))\n    | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n    | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n      Result.Err(Parser_error_unrecognized_character(ch))\n    };\n  switch (peek_token(lex)) {\n  | Result.Err(Lexer_error_end_of_file)\n  | Result.Ok(Tok_close_paren) => Result.Ok(None)\n  | Result.Ok(Tok_lambda) =>\n    eat_token(lex);\n    get_var_or_under()\n    >>= (name) => get_colon()\n    >>= () => get_ty()\n    >>= (ty) => get_dot()\n    >>= () => parse_term(lex)\n    >>= (body) => pure(Some(Lambda.abs(ty, name, body)))\n  | Result.Ok(Tok_var(name)) =>\n    eat_token(lex);\n    parse_app_list(Lambda.var(name))\n    >>= (it) => pure(Some(it))\n  | Result.Ok(Tok_marker) =>\n    eat_token(lex);\n    parse_app_list(Lambda.marker())\n    >>= (it) => pure(Some(it))\n  | Result.Ok(Tok_let) =>\n    eat_token(lex);\n    get_var()\n    >>= (name) => get_equals()\n    >>= () => parse_term(lex)\n    >>= (init) => get_in()\n    >>= () => parse_term(lex)\n    >>= (body) => pure(Some(Lambda.let_in(name, init, body)))\n  | Result.Ok(Tok_type) =>\n    eat_token(lex);\n    get_var()\n    >>= (name) => get_equals()\n    >>= () => get_ty()\n    >>= (ty) => get_in()\n    >>= () => parse_term(lex)\n    >>= (body) => pure(Some(Lambda.type_in(name, ty, body)))\n  | Result.Ok(Tok_open_paren) =>\n    eat_token(lex);\n    switch (peek_token(lex)) {\n    | Result.Ok(Tok_close_paren) =>\n      eat_token(lex);\n      parse_app_list(Lambda.unit())\n      >>= (it) => pure(Some(it))\n    | Result.Ok(_) =>\n      parse_term(lex)\n      >>= (ret) => get_close_paren()\n      >>= () => parse_app_list(ret)\n      >>= (it) => pure(Some(it))\n    | r => final_case(r)\n    }\n  | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n  | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n    Result.Err(Parser_error_unrecognized_character(ch))\n  }\n}\nand parse_term = (lex) => {\n  maybe_parse_term(lex)\n  >>=\n    fun\n    | Some(tm) => Result.Ok(tm)\n    | None =>\n      switch (next_token(lex)) {\n      | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n      | Result.Err(Lexer_error_end_of_file) => Result.Err(Parser_error_unexpected_eof)\n      | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n        Result.Err(Parser_error_unrecognized_character(ch))\n      }\n};\n\nlet parse = (buff) => {\n  let rest = (lex) => {\n    let len = String.length(lex.buffer) - lex.idx;\n    String.sub(lex.buffer, lex.idx, len)\n  };\n  let lex = make_lexer(buff);\n  parse_term(lex)\n  >>= (ret) => {\n    switch (next_token(lex)) {\n    | Result.Err(Lexer_error_end_of_file) => ()\n    | _ => failwith(\"parser didn't eat all the input: \" ++ rest(lex))\n    };\n    Result.Ok(ret)\n  }\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 26, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unsupported OCaml version: 4.10.0", "command": ""}}]}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re"},"range":{"start":{"line":0,"character":15},"end":{"line":0,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 27, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re","version":2},"contentChanges":[{"text":"// open Lambda;\n\nopen Result.Monad;\n\ntype token =\n  | Tok_lambda\n  | Tok_dot\n\n  | Tok_colon\n  | Tok_unit\n  | Tok_arrow\n\n  | Tok_open_paren\n  | Tok_close_paren\n  | Tok_marker\n\n  | Tok_let\n  | Tok_type\n  | Tok_equals\n  | Tok_in\n\n  | Tok_underscore\n  | Tok_var(string);\n\nlet string_of_token = (tok) =>\n  switch tok {\n  | Tok_lambda => \"/\"\n  | Tok_dot => \".\"\n  | Tok_colon => \":\"\n  | Tok_unit => \"unit\"\n  | Tok_arrow => \"->\"\n  | Tok_open_paren => \"(\"\n  | Tok_close_paren => \")\"\n  | Tok_marker => \"@\"\n  | Tok_let => \"let\"\n  | Tok_type => \"type\"\n  | Tok_equals => \"=\"\n  | Tok_in => \"in\"\n  | Tok_underscore => \"_\"\n  | Tok_var(name) => name\n  };\n\ntype lexer = {\n  buffer: string,\n  mutable idx: int,\n  mutable peekahead: option(token)\n};\n\ntype lexer_error =\n  | Lexer_error_end_of_file\n  | Lexer_error_unrecognized_character(char);\n\nlet is_whitespace = (ch) => ch == ' ' || ch == '\\t' || ch == '\\n' || ch == '\\r';\n\nlet is_alpha = (ch) => ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z';\n\nlet is_ident_start = (ch) => is_alpha(ch) || ch == '_';\n\nlet is_ident_continue = (ch) => is_ident_start(ch) || ch == '\\'';\n\nlet make_lexer = (buff) => {buffer: buff, idx: 0, peekahead: None};\n\nlet next_token: lexer => Result.t(token, lexer_error) =\n  (lex) => {\n    let peek_ch = () =>\n      if (String.length(lex.buffer) <= lex.idx) {\n        None\n      } else {\n        Some(lex.buffer.[lex.idx])\n      };\n    let next_ch = () =>\n      switch (peek_ch()) {\n      | Some(ch) =>\n        lex.idx = lex.idx + 1;\n        Some(ch)\n      | None => None\n      };\n    let eat_ch = () => next_ch() |> ignore;\n    let rec eat_whitespace = () =>\n      switch (peek_ch()) {\n      | Some(ch) when is_whitespace(ch) =>\n        eat_ch();\n        eat_whitespace()\n      | Some(_)\n      | None => ()\n      };\n    let lex_ident = (fst) => {\n      let rec helper = (bytes, idx) =>\n        switch (peek_ch()) {\n        | Some(ch) when is_ident_continue(ch) =>\n          eat_ch();\n          if (idx < Bytes.length(bytes)) {\n            Bytes.set(bytes, idx, ch);\n            helper(bytes, idx + 1)\n          } else {\n            failwith(\n              \"identifiers longer than \"\n              ++ string_of_int(Bytes.length(bytes))\n              ++ \" are not supported\"\n            )\n          }\n        | Some(_)\n        | None => idx\n        };\n      let bytes = Bytes.create(16);\n      Bytes.set(bytes, 0, fst);\n      let length = helper(bytes, 1);\n      let bytes' = Bytes.extend(bytes, 0, length - Bytes.length(bytes));\n      Bytes.unsafe_to_string(bytes')\n    };\n    switch lex.peekahead {\n    | Some(peek) =>\n      lex.peekahead = None;\n      Result.Ok(peek)\n    | None =>\n      eat_whitespace();\n      switch (next_ch()) {\n      | Some('/') => Result.Ok(Tok_lambda)\n      | Some(':') => Result.Ok(Tok_colon)\n      | Some('.') => Result.Ok(Tok_dot)\n      | Some('-') =>\n        switch (next_ch()) {\n        | Some('>') => Result.Ok(Tok_arrow)\n        | _ => Result.Err(Lexer_error_unrecognized_character('-'))\n        }\n      | Some('@') => Result.Ok(Tok_marker)\n      | Some('(') => Result.Ok(Tok_open_paren)\n      | Some(')') => Result.Ok(Tok_close_paren)\n      | Some('=') => Result.Ok(Tok_equals)\n      | Some(ch) when is_ident_start(ch) =>\n        let res = lex_ident(ch);\n        if (res == \"unit\") {\n          Result.Ok(Tok_unit)\n        } else if (res == \"_\") {\n          Result.Ok(Tok_underscore)\n        } else if (res == \"let\") {\n          Result.Ok(Tok_let)\n        } else if (res == \"type\") {\n          Result.Ok(Tok_type)\n        } else if (res == \"in\") {\n          Result.Ok(Tok_in)\n        } else {\n          Result.Ok(Tok_var(res))\n        }\n      | Some(ch) => Result.Err(Lexer_error_unrecognized_character(ch))\n      | None => Result.Err(Lexer_error_end_of_file)\n      }\n    }\n  };\n\nlet peek_token = (lex) => {\n  next_token(lex)\n  >>= (tok) => {\n    lex.peekahead = Some(tok);\n    pure(tok)\n  }\n};\n\nlet eat_token = (lex) => next_token(lex) |> ignore;\n\ntype parser_error =\n  | Parser_error_unrecognized_character(char)\n  | Parser_error_unexpected_token(token)\n  | Parser_error_unexpected_eof;\n\nlet print_parser_error = (err) =>\n  switch err {\n  | Parser_error_unrecognized_character(ch) =>\n    Printf.printf(\"unrecognized character: %c (%d)\", ch, int_of_char(ch))\n  | Parser_error_unexpected_token(tok) =>\n    print_string(\"unexpected token: \" ++ string_of_token(tok))\n  | Parser_error_unexpected_eof => print_string(\"unexpected end of file\")\n  };\n\nlet rec maybe_parse_term = (lex) => {\n  let final_case = (r) =>\n    switch r {\n    | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n    | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n      Result.Err(Parser_error_unrecognized_character(ch))\n    | Result.Err(Lexer_error_end_of_file) =>\n      Result.Err(Parser_error_unexpected_eof)\n    };\n  /* note: returns None for _, Some(name) for anything else */\n  let get_var_or_under = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_var(name)) => Result.Ok(Some(name))\n    | Result.Ok(Tok_underscore) => Result.Ok(None)\n    | r => final_case(r)\n    };\n  let get_var = () =>\n    get_var_or_under() >>=\n    fun\n    | Some(name) => Result.Ok(name)\n    | None => Result.Err(Parser_error_unexpected_token(Tok_underscore));\n  let get_dot = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_dot) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_colon = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_colon) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_close_paren = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_close_paren) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_equals = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_equals) => Result.Ok()\n    | r => final_case(r)\n    };\n  let get_in = () =>\n    switch (next_token(lex)) {\n    | Result.Ok(Tok_in) => Result.Ok()\n    | r => final_case(r)\n    };\n  let rec get_ty = () => {\n    let lhs =\n      switch (next_token(lex)) {\n      | Result.Ok(Tok_unit) => Result.Ok(Lambda.ty_unit())\n      | Result.Ok(Tok_var(name)) => Result.Ok(Lambda.ty_named(name))\n      | Result.Ok(Tok_open_paren) =>\n        get_ty()\n        >>= (ty) => get_close_paren()\n        >>= () => pure(ty)\n      | r => final_case(r)\n      };\n    lhs >>= (lhs) =>\n      switch (peek_token(lex)) {\n      | Result.Ok(Tok_arrow) =>\n        eat_token(lex);\n        get_ty()\n        >>= (it) => pure(Lambda.ty_lam(lhs, it))\n      | Result.Ok(_)\n      | Result.Err(Lexer_error_end_of_file) => Result.Ok(lhs)\n      | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n        Result.Err(Parser_error_unrecognized_character(ch))\n      }\n  };\n  let rec parse_app_list = (fst) =>\n    switch (peek_token(lex)) {\n    | Result.Err(Lexer_error_end_of_file)\n    | Result.Ok(Tok_close_paren)\n    | Result.Ok(Tok_in) => Result.Ok(fst)\n    | Result.Ok(Tok_lambda) =>\n      parse_term(lex)\n      >>= (it) => pure(Lambda.app(fst, it))\n    | Result.Ok(Tok_open_paren) =>\n      eat_token(lex);\n      let snd =\n        switch (peek_token(lex)) {\n        | Result.Ok(Tok_close_paren) => Result.Ok(Lambda.unit())\n        | Result.Ok(_) => parse_term(lex)\n        | r => final_case(r)\n        };\n      snd >>= ((snd) => get_close_paren() >>= (() => parse_app_list(Lambda.app(fst, snd))))\n    | Result.Ok(Tok_var(snd)) =>\n      eat_token(lex);\n      parse_app_list(Lambda.app(fst, Lambda.var(snd)))\n    | Result.Ok(Tok_marker) =>\n      eat_token(lex);\n      parse_app_list(Lambda.app(fst, Lambda.marker()))\n    | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n    | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n      Result.Err(Parser_error_unrecognized_character(ch))\n    };\n  switch (peek_token(lex)) {\n  | Result.Err(Lexer_error_end_of_file)\n  | Result.Ok(Tok_close_paren) => Result.Ok(None)\n  | Result.Ok(Tok_lambda) =>\n    eat_token(lex);\n    get_var_or_under()\n    >>= (name) => get_colon()\n    >>= () => get_ty()\n    >>= (ty) => get_dot()\n    >>= () => parse_term(lex)\n    >>= (body) => pure(Some(Lambda.abs(ty, name, body)))\n  | Result.Ok(Tok_var(name)) =>\n    eat_token(lex);\n    parse_app_list(Lambda.var(name))\n    >>= (it) => pure(Some(it))\n  | Result.Ok(Tok_marker) =>\n    eat_token(lex);\n    parse_app_list(Lambda.marker())\n    >>= (it) => pure(Some(it))\n  | Result.Ok(Tok_let) =>\n    eat_token(lex);\n    get_var()\n    >>= (name) => get_equals()\n    >>= () => parse_term(lex)\n    >>= (init) => get_in()\n    >>= () => parse_term(lex)\n    >>= (body) => pure(Some(Lambda.let_in(name, init, body)))\n  | Result.Ok(Tok_type) =>\n    eat_token(lex);\n    get_var()\n    >>= (name) => get_equals()\n    >>= () => get_ty()\n    >>= (ty) => get_in()\n    >>= () => parse_term(lex)\n    >>= (body) => pure(Some(Lambda.type_in(name, ty, body)))\n  | Result.Ok(Tok_open_paren) =>\n    eat_token(lex);\n    switch (peek_token(lex)) {\n    | Result.Ok(Tok_close_paren) =>\n      eat_token(lex);\n      parse_app_list(Lambda.unit())\n      >>= (it) => pure(Some(it))\n    | Result.Ok(_) =>\n      parse_term(lex)\n      >>= (ret) => get_close_paren()\n      >>= () => parse_app_list(ret)\n      >>= (it) => pure(Some(it))\n    | r => final_case(r)\n    }\n  | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n  | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n    Result.Err(Parser_error_unrecognized_character(ch))\n  }\n}\nand parse_term = (lex) => {\n  maybe_parse_term(lex)\n  >>=\n    fun\n    | Some(tm) => Result.Ok(tm)\n    | None =>\n      switch (next_token(lex)) {\n      | Result.Ok(tok) => Result.Err(Parser_error_unexpected_token(tok))\n      | Result.Err(Lexer_error_end_of_file) => Result.Err(Parser_error_unexpected_eof)\n      | Result.Err(Lexer_error_unrecognized_character(ch)) =>\n        Result.Err(Parser_error_unrecognized_character(ch))\n      }\n};\n\nlet parse = (buff) => {\n  let rest = (lex) => {\n    let len = String.length(lex.buffer) - lex.idx;\n    String.sub(lex.buffer, lex.idx, len)\n  };\n  let lex = make_lexer(buff);\n  parse_term(lex)\n  >>= (ret) => {\n    switch (next_token(lex)) {\n    | Result.Err(Lexer_error_end_of_file) => ()\n    | _ => failwith(\"parser didn't eat all the input: \" ++ rest(lex))\n    };\n    Result.Ok(ret)\n  }\n};\n"}]}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re","version":2}}}
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unsupported OCaml version: 4.10.0"}}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re"},"position":{"line":10,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Found a `dune` file at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
]] Making a new jbuilder package at /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
=== Project root: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
New dune process
[MerlinFile]: Error: Insufficient build files found for module Lambda - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/lambda.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Parse - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/parse.rei, cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Tal - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/tal.re, srci: (), cmi: (), cmt: (), cmti: ()
[MerlinFile]: Error: Insufficient build files found for module Result - src: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.re, srci: /Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/result.rei, cmi: (), cmt: (), cmti: ()
>> Build system running: opam exec -- dune build @install --root .
>>> stdout

>>> stderr
[ERROR] No config file found for switch 4.08.1. Switch broken?
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/bsconfig.json", "diagnostics": []}}
Sending response {"id": 28, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unsupported OCaml version: 4.10.0"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":28}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/.merlin","type":3}]}}
Got a watched file change
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/.merlin","type":1},{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/_build/default/.merlin","type":1}]}}
Got a watched file change
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/.merlin","type":3}]}}
Got a watched file change
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/_build/default/.merlin","type":1},{"uri":"file:///Users/mandalarian/Github/learning-lamda-calculus/tapl-re-dune/.merlin","type":1}]}}
Got a watched file change

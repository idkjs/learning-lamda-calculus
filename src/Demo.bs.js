// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Unfold$AnjanaLambdas = require("./unfold.bs.js");

function toNumber(n) {
  return Curry._2(n, (function (i) {
                return i + 1 | 0;
              }), 0);
}

function zero(_f, x) {
  return x;
}

function one(f, x) {
  return Curry._1(f, x);
}

function two(f, x) {
  return Curry._1(f, Curry._1(f, x));
}

function three(f, x) {
  return Curry._1(f, Curry._1(f, Curry._1(f, x)));
}

console.log("three", toNumber(three));

console.log("zero", toNumber(zero));

console.log("one", toNumber(one));

console.log("two", toNumber(two));

function add(n, m, f, x) {
  return Curry._2(m, f, Curry._2(n, f, x));
}

function four(param, param$1) {
  return add(one, three, param, param$1);
}

toNumber(four);

console.log("three x four", toNumber((function (param, param$1) {
            return four((function (param$2) {
                          return three(param, param$2);
                        }), param$1);
          })));

console.log("three x two", toNumber((function (param, param$1) {
            var f = function (param$2) {
              return three(param, param$2);
            };
            return Curry._1(f, Curry._1(f, param$1));
          })));

function answer(param, param$1) {
  return add(two, (function (param, param$1) {
                var param$2 = function (param$3) {
                  return four(param, param$3);
                };
                return add(four, one, (function (param$3) {
                              return two(param$2, param$3);
                            }), param$1);
              }), param, param$1);
}

console.log("the answer", toNumber(answer));

function troo(thn, els) {
  return thn;
}

function falz(thn, els) {
  return els;
}

console.log("amTired(falz)", toNumber(one));

console.log("amTired(true)", toNumber(three));

console.log("coffeesToday->tired=true", toNumber(one));

console.log("amTired->tired=false", toNumber(one));

console.log("howManyCoffeesToday->tired=false", toNumber((function (param) {
            return (function (param$1) {
                return one((function (param$2) {
                              return one((function (param$3) {
                                            return one(param, param$3);
                                          }), param$2);
                            }), param$1);
              });
          })));

console.log("howManyCoffeesToday->tired=true", toNumber((function (param) {
            var f = function (param) {
              var f$1 = function (param) {
                return (function (param$1) {
                    return one((function (param$2) {
                                  return one((function (param$3) {
                                                return one(param, param$3);
                                              }), param$2);
                                }), param$1);
                  });
              };
              return Curry._1(f$1, Curry._1(f$1, Curry._1(f$1, param)));
            };
            return Curry._1(f, Curry._1(f, Curry._1(f, param)));
          })));

console.log("toBoolean:falz", false);

console.log("toBoolean:troo", true);

console.log("not falz should be true:", true);

console.log("toBoolean(or_(troo)):", troo(true, false));

console.log("toBoolean(or_(falz)):", falz(true, false));

console.log("bool(falz)):", false);

console.log("bool(troo)):", true);

console.log("toBoolean(or_(falz)):", false);

console.log("toBoolean(or_(troo)):", true);

console.log("bool(falz)):", false);

console.log("bool(troo)):", true);

console.log("a is true so should return true:", (function (param) {
        return falz(false, param);
      }));

function __x(param) {
  return troo(false, param);
}

console.log("and_(troo)(troo):", __x);

console.log(Unfold$AnjanaLambdas.example(4));

exports.toNumber = toNumber;
exports.zero = zero;
exports.one = one;
exports.two = two;
exports.three = three;
/*  Not a pure module */
